pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials-id')
        DOCKERHUB_USERNAME = DOCKERHUB_CREDENTIALS_USR
        DOCKERHUB_PASSWORD = DOCKERHUB_CREDENTIALS_PSW
        DOCKERHUB_REPO = 'your-dockerhub-repo/your-image'
    }

    stages {
        stage('Get Latest Version') {
            steps {
                script {
                    
                     def response = httpRequest(
                        authentication: 'dockerhub-credentials-id', 
                        url: "https://hub.docker.com/v2/repositories/${DOCKERHUB_REPO}/tags/"
                    )
                    def currentVersion = response.data.results[0].name
                    echo "Latest version from Docker Hub: ${currentVersion}"

                    def parts = currentVersion.tokenize('.')
                    def major = parts[0] as Integer
                    def minor = parts[1] as Integer
                    def patch = parts[2] as Integer
                    def nextVersion = "${major}.${minor}.${patch + 1}"

                    echo "Next version: ${nextVersion}"
                    env.APP_VERSION = nextVersion
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    try {
                            
                            sh "docker build -t ${DOCKERHUB_REPO}:${env.APP_VERSION} ./node-api"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Docker build failed: ${e.message}")
                    }
                }
            }
        }
         stage('Push Docker Images') {
            steps {
                script {
                    try {
                            sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                            
                            sh "docker push ${DOCKERHUB_REPO}:${env.APP_VERSION}"

                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Docker push failed: ${e.message}")
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    try {
                        sh "kubectl apply -f ./backend-deploy/node-api-deployment.yaml"
                        sh "kubectl apply -f ./backend-deploy/node-api-service.yaml"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Kubernetes deployment failed: ${e.message}")
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment succeeded!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
